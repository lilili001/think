<?php
/**
  元字符
 */
/**--------- [] 正则语法，匹配里面的任意一个即可 不需要非要3位跟$m1去匹配 -----------------------------**/
//[a-z] 26个字母中任意一个 匹配成功了就不找了
//[A-Z]
//[0-9]
$m1 = '/[abc]/';
$s1 = 'a';
echo  '1:'.preg_match( $m1,$s1 ).'<br/>';//1

$m2 = '/[abc][hij]/';
$s2 = 'ad';//a 对应[abc]中的任意一个 d对应[hij] 因为d 在hij中找不到 所以不匹配
echo  '2:'.preg_match( $m2,$s2 ).'<br/>';//0

//[a-zA-Z0-9_] 表示其中一个匹配 a-zA-Z0-9和下划线 中的任意一个  这种可以用 \w来表示
$m3 = '/[a-zA-Z0-9]/';
$s3 = 'a。';//匹配，匹配的是a
//。 不匹配 因为 。 不属于[a-zA-Z0-9_]
echo  '3:'.preg_match( $m3,$s3 ).'<br/>';//1

//[^a-z] 非 注意^要写在[]里面
$m4 = '/[^a-z]/';
$s4 = 'A';//匹配
echo  '4:'.preg_match( $m4,$s4 ).'<br/>';//1

//\W 匹配任何没有下划线和字母的
//\d 和[0-9]一样
$m5 = '/\d/';
$s5 = '5';//匹配
echo  '6:'.preg_match( $m5,$s5 ).'<br/>';//1

//\D 不是数字 和[^0-9]相同
//s 匹配任何空白字符
$m6 = '/\s/';
$s6 = ' ';//匹配
echo  '7:'.preg_match( $m6,$s6 ).'<br/>';//1

//\b表示到达了单词的边界 就是单词是不是独立的 边界可以理解为空格
//\B没有到达边界
$m7 = '/php\b/';
$s7 = 'php is good';//匹配     phpp不匹配
echo  '8:'.preg_match( $m7,$s7 ).'<br/>';//1

//  \匹配特殊字符+
$m8 = '/ph\+p/';
$s8 = 'ph+p';//匹配     phpp不匹配
echo  '9:'.preg_match( $m8,$s8 ).'<br/>';//1